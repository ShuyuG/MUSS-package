# print(sslasso_indices)
set.seed(1234)
cv.fit = cv.glmnet(Z,y,alpha=1)
beta_lasso = coef(cv.fit,s = "lambda.min")
lasso_indices = which(beta_lasso!=0)
lasso_value = beta_lasso[lasso_indices]
# lasso_indices
Plot = ggplot()+
geom_point(aes(x = true_indices, y = true_values, color="True Value",
shape="True Value"),size = 3)+
geom_point(aes(x = muss_G$beta_indices, y = muss_G$beta_values,
color="Gaussian MUSS",shape="Gaussian MUSS"),size = 4)+
geom_point(aes(x = muss_L$beta_indices, y = muss_L$beta_values,
color="Laplacian MUSS",shape="Laplacian MUSS"),size = 2.5)+
geom_point(aes(x = sslasso_indices, y = sslasso_value,
color="SSLASSO",shape="SSLASSO"),size = 2)+
geom_point(aes(x = lasso_indices, y = lasso_value,
color="LASSO",shape="LASSO"),size = 2)+
scale_color_manual("", values = c("True Value" = "10A19D", "Laplacian MUSS" = "blue",
"Gaussian MUSS" = "#BA94D1", "SSLASSO" = "yellow",
"LASSO" = "orange"))+
scale_shape_manual("",values = c("True Value" = 16, "Laplacian MUSS" = 17,
"Gaussian MUSS" = 16,"SSLASSO" = 16,
"LASSO" = 16))+
xlab("indices")+ylab("beta")+
labs(title ="Selected beta vs True beta")+
theme(plot.title = element_text(size=13,hjust=0.5))
Plot
set.seed(1234)
# model dimension
n = 100
p = 500
# true beta
beta_true = rep(0,p)
true_indices = 1+100*(0:4)
true_values = c(-1, -2, 0.5, 1, 3)
beta_true[true_indices] = true_values
# construct X, y
cov = diag(p)
mu = rep(0,p)
X = mvrnorm(n,mu,cov)
epsilon = rnorm(n,0,1)
y = X %*% beta_true+epsilon
set.seed(1234)
# tauList: variances of error in variables
tau = rep(0.5,p)
# construct Z
Xi = mvrnorm(n, rep(0,p), diag(tau))
Z = X +Xi
# set initial values
beta_0 = rep(0,p)
sigma_0 = 1
theta_0 = 0.5
# slab and spike parameters
# Laplacian
slab_L = 1  # slab parameter
spikes_L = exp(seq(log(slab_L),by=-0.3,length.out=20))[-1] # spike parameters
# Gaussian
slab_G = 1 # slab parameter
spikes_G =  exp(seq(log(slab_G),by=-0.5,length.out=20))[-1] # spike parameters
# Laplacian MUSS
muss_L = MUSS(Z, y, beta_prior_type = "Laplacian", tauList = tau, spike_params = spikes_L,
slab_param = slab_L, beta_init = beta_0, sigma_update = TRUE,
sigma_init = sigma_0, theta_init = theta_0, return_g = TRUE)
# Gaussian MUSS
muss_G = MUSS(Z, y, beta_prior_type = "Gaussian", tauList = tau, spike_params = spikes_G,
slab_param = slab_G, beta_init = beta_0, sigma_update = TRUE,
sigma_init = sigma_0, theta_init = theta_0, return_g = TRUE)
library(glmnet)
library(SSLASSO)
sslassofit = SSLASSO(Z, y,variance = "unknown",sigma = 1)
sslasso_indices = sslassofit$model
sslasso_value = sslassofit$beta[,100][sslasso_indices]
# print(sslasso_indices)
set.seed(1234)
cv.fit = cv.glmnet(Z,y,alpha=1)
beta_lasso = coef(cv.fit,s = "lambda.min")
lasso_indices = which(beta_lasso!=0)
lasso_value = beta_lasso[lasso_indices]
# lasso_indices
Plot = ggplot()+
geom_point(aes(x = true_indices, y = true_values, color="True Value",
shape="True Value"),size = 3)+
geom_point(aes(x = muss_G$beta_indices, y = muss_G$beta_values,
color="Gaussian MUSS",shape="Gaussian MUSS"),size = 4)+
geom_point(aes(x = muss_L$beta_indices, y = muss_L$beta_values,
color="Laplacian MUSS",shape="Laplacian MUSS"),size = 2.5)+
geom_point(aes(x = sslasso_indices, y = sslasso_value,
color="SSLASSO",shape="SSLASSO"),size = 2)+
geom_point(aes(x = lasso_indices, y = lasso_value,
color="LASSO",shape="LASSO"),size = 2)+
scale_color_manual("", values = c("True Value" = "10A19D", "Laplacian MUSS" = "blue",
"Gaussian MUSS" = "#BA94D1", "SSLASSO" = "yellow",
"LASSO" = "orange"))+
scale_shape_manual("",values = c("True Value" = 16, "Laplacian MUSS" = 17,
"Gaussian MUSS" = 16,"SSLASSO" = 16,
"LASSO" = 16))+
xlab("indices")+ylab("beta")+
labs(title ="Selected beta vs True beta")+
theme(plot.title = element_text(size=13,hjust=0.5))
Plot
set.seed(345)
# model dimension
n = 100
p = 500
# true beta
beta_true = rep(0,p)
true_indices = 1+100*(0:4)
true_values = c(-1, -2, 0.5, 1, 3)
beta_true[true_indices] = true_values
# construct X, y
cov = diag(p)
mu = rep(0,p)
X = mvrnorm(n,mu,cov)
epsilon = rnorm(n,0,1)
y = X %*% beta_true+epsilon
set.seed(1234)
# tauList: variances of error in variables
tau = rep(0.5,p)
# construct Z
Xi = mvrnorm(n, rep(0,p), diag(tau))
Z = X +Xi
# set initial values
beta_0 = rep(0,p)
sigma_0 = 1
theta_0 = 0.5
# slab and spike parameters
# Laplacian
slab_L = 1  # slab parameter
spikes_L = exp(seq(log(slab_L),by=-0.3,length.out=20))[-1] # spike parameters
# Gaussian
slab_G = 1 # slab parameter
spikes_G =  exp(seq(log(slab_G),by=-0.5,length.out=20))[-1] # spike parameters
# Laplacian MUSS
muss_L = MUSS(Z, y, beta_prior_type = "Laplacian", tauList = tau, spike_params = spikes_L,
slab_param = slab_L, beta_init = beta_0, sigma_update = TRUE,
sigma_init = sigma_0, theta_init = theta_0, return_g = TRUE)
# Gaussian MUSS
muss_G = MUSS(Z, y, beta_prior_type = "Gaussian", tauList = tau, spike_params = spikes_G,
slab_param = slab_G, beta_init = beta_0, sigma_update = TRUE,
sigma_init = sigma_0, theta_init = theta_0, return_g = TRUE)
library(glmnet)
library(SSLASSO)
sslassofit = SSLASSO(Z, y,variance = "unknown",sigma = 1)
sslasso_indices = sslassofit$model
sslasso_value = sslassofit$beta[,100][sslasso_indices]
# print(sslasso_indices)
set.seed(1234)
cv.fit = cv.glmnet(Z,y,alpha=1)
beta_lasso = coef(cv.fit,s = "lambda.min")
lasso_indices = which(beta_lasso!=0)
lasso_value = beta_lasso[lasso_indices]
# lasso_indices
Plot = ggplot()+
geom_point(aes(x = true_indices, y = true_values, color="True Value",
shape="True Value"),size = 3)+
geom_point(aes(x = muss_G$beta_indices, y = muss_G$beta_values,
color="Gaussian MUSS",shape="Gaussian MUSS"),size = 4)+
geom_point(aes(x = muss_L$beta_indices, y = muss_L$beta_values,
color="Laplacian MUSS",shape="Laplacian MUSS"),size = 2.5)+
geom_point(aes(x = sslasso_indices, y = sslasso_value,
color="SSLASSO",shape="SSLASSO"),size = 2)+
geom_point(aes(x = lasso_indices, y = lasso_value,
color="LASSO",shape="LASSO"),size = 2)+
scale_color_manual("", values = c("True Value" = "10A19D", "Laplacian MUSS" = "blue",
"Gaussian MUSS" = "#BA94D1", "SSLASSO" = "yellow",
"LASSO" = "orange"))+
scale_shape_manual("",values = c("True Value" = 16, "Laplacian MUSS" = 17,
"Gaussian MUSS" = 16,"SSLASSO" = 16,
"LASSO" = 16))+
xlab("indices")+ylab("beta")+
labs(title ="Selected beta vs True beta")+
theme(plot.title = element_text(size=13,hjust=0.5))
Plot
set.seed(1234)
# model dimension
n = 100
p = 500
# true beta
beta_true = rep(0,p)
true_indices = 1+100*(0:4)
true_values = c(-2, -2, 0.5, 1, 3)
beta_true[true_indices] = true_values
# construct X, y
cov = diag(p)
mu = rep(0,p)
X = mvrnorm(n,mu,cov)
epsilon = rnorm(n,0,1)
y = X %*% beta_true+epsilon
set.seed(1234)
# tauList: variances of error in variables
tau = rep(0.5,p)
# construct Z
Xi = mvrnorm(n, rep(0,p), diag(tau))
Z = X +Xi
# set initial values
beta_0 = rep(0,p)
sigma_0 = 1
theta_0 = 0.5
# slab and spike parameters
# Laplacian
slab_L = 1  # slab parameter
spikes_L = exp(seq(log(slab_L),by=-0.3,length.out=20))[-1] # spike parameters
# Gaussian
slab_G = 1 # slab parameter
spikes_G =  exp(seq(log(slab_G),by=-0.5,length.out=20))[-1] # spike parameters
set.seed(1234)
# model dimension
n = 100
p = 500
# true beta
beta_true = rep(0,p)
true_indices = 1+100*(0:4)
true_values = c(-2, -2, 0.5, 1, 3)
beta_true[true_indices] = true_values
# construct X, y
cov = diag(p)
mu = rep(0,p)
X = mvrnorm(n,mu,cov)
epsilon = rnorm(n,0,1)
y = X %*% beta_true+epsilon
set.seed(1234)
# tauList: variances of error in variables
tau = rep(0.5,p)
# construct Z
Xi = mvrnorm(n, rep(0,p), diag(tau))
Z = X +Xi
# set initial values
beta_0 = rep(0,p)
sigma_0 = 1
theta_0 = 0.5
# slab and spike parameters
# Laplacian
slab_L = 1  # slab parameter
spikes_L = exp(seq(log(slab_L),by=-0.3,length.out=20))[-1] # spike parameters
# Gaussian
slab_G = 1 # slab parameter
spikes_G =  exp(seq(log(slab_G),by=-0.5,length.out=20))[-1] # spike parameters
# Laplacian MUSS
muss_L = MUSS(Z, y, beta_prior_type = "Laplacian", tauList = tau, spike_params = spikes_L,
slab_param = slab_L, beta_init = beta_0, sigma_update = TRUE,
sigma_init = sigma_0, theta_init = theta_0, return_g = TRUE)
# Gaussian MUSS
muss_G = MUSS(Z, y, beta_prior_type = "Gaussian", tauList = tau, spike_params = spikes_G,
slab_param = slab_G, beta_init = beta_0, sigma_update = TRUE,
sigma_init = sigma_0, theta_init = theta_0, return_g = TRUE)
print(muss_L$beta_indices)
print(muss_G$beta_indices)
library(glmnet)
library(SSLASSO)
sslassofit = SSLASSO(Z, y,variance = "unknown",sigma = 1)
sslasso_indices = sslassofit$model
sslasso_value = sslassofit$beta[,100][sslasso_indices]
# print(sslasso_indices)
set.seed(1234)
cv.fit = cv.glmnet(Z,y,alpha=1)
beta_lasso = coef(cv.fit,s = "lambda.min")
lasso_indices = which(beta_lasso!=0)
lasso_value = beta_lasso[lasso_indices]
# lasso_indices
Plot = ggplot()+
geom_point(aes(x = true_indices, y = true_values, color="True Value",
shape="True Value"),size = 3)+
geom_point(aes(x = muss_G$beta_indices, y = muss_G$beta_values,
color="Gaussian MUSS",shape="Gaussian MUSS"),size = 4)+
geom_point(aes(x = muss_L$beta_indices, y = muss_L$beta_values,
color="Laplacian MUSS",shape="Laplacian MUSS"),size = 2.5)+
geom_point(aes(x = sslasso_indices, y = sslasso_value,
color="SSLASSO",shape="SSLASSO"),size = 2)+
geom_point(aes(x = lasso_indices, y = lasso_value,
color="LASSO",shape="LASSO"),size = 2)+
scale_color_manual("", values = c("True Value" = "10A19D", "Laplacian MUSS" = "blue",
"Gaussian MUSS" = "#BA94D1", "SSLASSO" = "yellow",
"LASSO" = "orange"))+
scale_shape_manual("",values = c("True Value" = 16, "Laplacian MUSS" = 17,
"Gaussian MUSS" = 16,"SSLASSO" = 16,
"LASSO" = 16))+
xlab("indices")+ylab("beta")+
labs(title ="Selected beta vs True beta")+
theme(plot.title = element_text(size=13,hjust=0.5))
Plot
library(MUSS)
library(ggplot2)
library(MASS)
library(glmnet)
library(SSLASSO)
print("replication:",1)
print("replication:"+ 1)
print("replication:%f",1)
# true beta
beta_true = rep(0,p)
true_indices = 1+100*(0:4)
true_values = c(-2, -1, 0.5, 2.5, 3)
beta_true[true_indices] = true_values
# tauList: variances of error in variables
tau = rep(0.5,p)
# set initial values
beta_0 = rep(0,p)
sigma_0 = 1
theta_0 = 0.5
# slab and spike parameters
# Laplacian
slab_L = 1  # slab parameter
spikes_L = exp(seq(log(slab_L),by=-0.3,length.out=20))[-1] # spike parameters
# Gaussian
slab_G = 1 # slab parameter
spikes_G =  exp(seq(log(slab_G),by=-0.5,length.out=20))[-1] # spike parameters
for (i in 1:20) {
set.seed(i)
# model dimension
n = 100
p = 500
# construct X, y
cov = diag(p)
mu = rep(0,p)
X = mvrnorm(n,mu,cov)
epsilon = rnorm(n,0,1)
y = X %*% beta_true+epsilon
# construct Z
Xi = mvrnorm(n, rep(0,p), diag(tau))
Z = X +Xi
muss_L = MUSS(Z, y, beta_prior_type = "Laplacian", tauList = tau, spike_params = spikes_L,
slab_param = slab_L, beta_init = beta_0, sigma_update = TRUE,
sigma_init = sigma_0, theta_init = theta_0, return_g = TRUE)
print(i)
print(muss_L$beta_indices)
sslassofit = SSLASSO(Z, y,variance = "unknown",sigma = 1)
sslasso_indices = sslassofit$model
# sslasso_value = sslassofit$beta[,100][sslasso_indices]
print(sslasso_indices)
set.seed(1234)
cv.fit = cv.glmnet(Z,y,alpha=1)
beta_lasso = coef(cv.fit,s = "lambda.min")
lasso_indices = which(beta_lasso!=0)
# lasso_value = beta_lasso[lasso_indices]
print(lasso_indices)
}
# true beta
beta_true = rep(0,p)
true_indices = 1+100*(0:4)
true_values = c(-2, -2, 1.5, 2, 3)
beta_true[true_indices] = true_values
# tauList: variances of error in variables
tau = rep(0.5,p)
# set initial values
beta_0 = rep(0,p)
sigma_0 = 1
theta_0 = 0.5
# slab and spike parameters
# Laplacian
slab_L = 1  # slab parameter
spikes_L = exp(seq(log(slab_L),by=-0.3,length.out=20))[-1] # spike parameters
# Gaussian
slab_G = 1 # slab parameter
spikes_G =  exp(seq(log(slab_G),by=-0.5,length.out=20))[-1] # spike parameters
for (i in 1:20) {
set.seed(i)
# model dimension
n = 100
p = 500
# construct X, y
cov = diag(p)
mu = rep(0,p)
X = mvrnorm(n,mu,cov)
epsilon = rnorm(n,0,1)
y = X %*% beta_true+epsilon
# construct Z
Xi = mvrnorm(n, rep(0,p), diag(tau))
Z = X +Xi
muss_L = MUSS(Z, y, beta_prior_type = "Laplacian", tauList = tau, spike_params = spikes_L,
slab_param = slab_L, beta_init = beta_0, sigma_update = TRUE,
sigma_init = sigma_0, theta_init = theta_0, return_g = TRUE)
print(i)
print(muss_L$beta_indices)
sslassofit = SSLASSO(Z, y,variance = "unknown",sigma = 1)
sslasso_indices = sslassofit$model
# sslasso_value = sslassofit$beta[,100][sslasso_indices]
print(sslasso_indices)
set.seed(1234)
cv.fit = cv.glmnet(Z,y,alpha=1)
beta_lasso = coef(cv.fit,s = "lambda.min")
lasso_indices = which(beta_lasso!=0)
# lasso_value = beta_lasso[lasso_indices]
print(lasso_indices)
}
# true beta
beta_true = rep(0,p)
true_indices = 1+100*(0:4)
true_values = c(-2, -2, 1.5, 2, 3)
beta_true[true_indices] = true_values
# tauList: variances of error in variables
tau = rep(0.5,p)
# set initial values
beta_0 = rep(0,p)
sigma_0 = 1
theta_0 = 0.5
# slab and spike parameters
# Laplacian
slab_L = 1  # slab parameter
spikes_L = exp(seq(log(slab_L),by=-0.3,length.out=20))[-1] # spike parameters
# Gaussian
slab_G = 1 # slab parameter
spikes_G =  exp(seq(log(slab_G),by=-0.5,length.out=20))[-1] # spike parameters
for (i in 1:20) {
set.seed(i)
# model dimension
n = 100
p = 500
# construct X, y
cov = diag(p)
mu = rep(0,p)
X = mvrnorm(n,mu,cov)
epsilon = rnorm(n,0,1)
y = X %*% beta_true+epsilon
# construct Z
Xi = mvrnorm(n, rep(0,p), diag(tau))
Z = X +Xi
muss_L = MUSS(Z, y, beta_prior_type = "Laplacian", tauList = tau, spike_params = spikes_L,
slab_param = slab_L, beta_init = beta_0, sigma_update = TRUE,
sigma_init = sigma_0, theta_init = theta_0, return_g = TRUE)
print(i)
print(muss_L$beta_indices)
sslassofit = SSLASSO(Z, y,variance = "unknown",sigma = 1)
sslasso_indices = sslassofit$model
# sslasso_value = sslassofit$beta[,100][sslasso_indices]
print(sslasso_indices)
set.seed(1234)
cv.fit = cv.glmnet(Z,y,alpha=1)
beta_lasso = coef(cv.fit,s = "lambda.min")
lasso_indices = which(beta_lasso!=0)
# lasso_value = beta_lasso[lasso_indices]
print(lasso_indices)
}
set.seed(1234)
# model dimension
n = 200
p = 500
# true beta
# beta_true = rep(0,p)
# true_indices = 1+100*(0:4)
# true_values = c(-2, -2, 0.5, 1, 3)
# beta_true[true_indices] = true_values
beta_true = c(-3, 2, -1.5, -2, 3, rep(0,p-5))
# construct X, y
cov = diag(p)
mu = rep(0,p)
X = mvrnorm(n,mu,cov)
library(MUSS)
library(ggplot2)
library(MASS)
set.seed(1234)
# model dimension
n = 200
p = 500
# true beta
# beta_true = rep(0,p)
# true_indices = 1+100*(0:4)
# true_values = c(-2, -2, 0.5, 1, 3)
# beta_true[true_indices] = true_values
beta_true = c(-3, 2, -1.5, -2, 3, rep(0,p-5))
# construct X, y
X = matrix(rnorm(n*p, 0, 1), nrow = n)
epsilon = rnorm(n, 0, 1)
y = X %*% beta_true + epsilon
set.seed(1234)
# tauList: variances of error in variables
tau = sample(seq(0.5,0.9,by = 0.1), size = p, replace = TRUE)
# construct Z
Xi = mvrnorm(n, rep(0,p), diag(tau))
Z = X + Xi
# set initial values
beta_0 = rep(0,p)
sigma_0 = 1
theta_0 = 0.5
# slab and spike parameters
# Laplacian
slab_L = 1  # slab parameter
spikes_L = exp(seq(log(slab_L),by=-0.3,length.out=20))[-1] # spike parameters
# Gaussian
slab_G = 1 # slab parameter
spikes_G =  exp(seq(log(slab_G),by=-0.5,length.out=20))[-1] # spike parameters
# Laplacian MUSS
muss_L = MUSS(Z, y, beta_prior_type = "Laplacian", tauList = tau, spike_params = spikes_L,
slab_param = slab_L, beta_init = beta_0, sigma_update = TRUE,
sigma_init = sigma_0, theta_init = theta_0, return_g = TRUE)
# Gaussian MUSS
muss_G = MUSS(Z, y, beta_prior_type = "Gaussian", tauList = tau, spike_params = spikes_G,
slab_param = slab_G, beta_init = beta_0, sigma_update = TRUE,
sigma_init = sigma_0, theta_init = theta_0, return_g = TRUE)
print(muss_L$beta_indices)
print(muss_G$beta_indices)
print(muss_L$beta_indices)
print(muss_G$beta_indices)
print(muss_L$beta_indices)
print(muss_G$beta_indices)
print(muss_L$beta_indices)
print(muss_G$beta_indices)
devtools::install(build_vignettes = TRUE)
browseVignettes(MUSS)
devtools::build_vignettes()
devtools::build(vignettes = TRUE, manual = TRUE)
devtools::build(vignettes = TRUE, manual = TRUE)
devtools::build_manual()
devtools::build_manual(pkg = ".", path = './doc')
devtools::build(vignettes = TRUE, manual = TRUE)
devtools::build_manual()
devtools::build_manual()
devtools::build(manual = TRUE)
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
